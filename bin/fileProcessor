#!/usr/bin/env node

const fs = require('fs');
const { markdown } = require('markdown');
const path = require('path');
const xpath = require('xpath');
const yaml = require('js-yaml');
const { DOMParser } = require('xmldom');
const HTML5Outline = require('h5o');
const { JSDOM } = require('jsdom');


const nodes = ['H1', 'H2', 'H3', 'H4', 'H5', 'H6'];
var exports = module.exports = {};
var currentH2 = {};
var heading = {
  H2: [],
  H3: [],
  H4: [],
  H5: [],
  H6: [],
};

function idFiedTitle(title) {
  return title.toLowerCase().replace(/[^A-Za-z0-9\-\ \_]/g, '').replace(/ /g, '-');
}

exports.processFile = function (filepath, id) {
  let item = [{ title: '', anchors: [] }];
  let currentPos;
  let content = fs.readFileSync(path.resolve(__dirname, `../src/pages/docs/${filepath}/${id}.md`)).toString();
  content = content.replace(/([^`])(`)([^`])/gm, '$1$3');
  content = content.replace(/```(|yaml|xml|php|json|javascript|sh)[^`]*```/gm, '');
  content = markdown.toHTML(content);

  const outline = HTML5Outline(new JSDOM(content).window.document.body);
  console.log(outline)

  outline.sections.map((section) => {
    // console.log(section.heading.tagName)
    // H1
    // console.log(section.heading.innerHTML) Donne le Title de l'item
    // Getting Started with API Platform: Hypermedia and GraphQL API, Admin and Progressive Web App
    // ...
    section.sections.map((sectionH2) => {
      currentH2 = {
        id: idFiedTitle(sectionH2.heading.innerHTML),
        title: sectionH2.heading.innerHTML,
      };

      //console.log(currentH2);

      // Construction des ancres:
      // Return tableau de h2
      processNextElementSibling(sectionH2.heading.nextElementSibling);
      // Construit l'item avec h1 et tableau d'H2
    });
  });

  function processNextElementSibling(el) {
    if (el && nodes.includes(el.tagName)) {
      let previous = el.previousElementSibling;
      while (!nodes.includes(previous.tagName)) {
        previous = previous.previousElementSibling;
      }
      //console.log('prev: ', previous.tagName, 'current: ', el.tagName, el.innerHTML);
      // console.log(el.innerHTML);
      // TODO: Refactor the following:
      if (el.tagName === previous.tagName) {
        heading[el.tagName].push({ title: el.innerHTML });
      }

      if (el.tagName < previous.tagName) {
        heading[el.tagName].push({ title: el.innerHTML });
      }

      if (el.tagName > previous.tagName) {
        heading[previous.tagName ] = {id: el.innerHTML.toLowerCase().replace(/[^A-Za-z0-9\-\ \_]/g, '').replace(/ /g, '-'), title: el.innerHTML}
      }
    }
    if (el) {
      processNextElementSibling(el.nextElementSibling);
    }
  }

  // console.log(heading);
};
