#!/usr/bin/env node

const fs = require('fs');
const { markdown } = require('markdown');
const path = require('path');
const HTML5Outline = require('h5o');
const { JSDOM } = require('jsdom');

function slug(string) {
  return string.toLowerCase()
    .replace(/[^A-Za-z0-9\\-\\ \\_]/g, '')
    .replace(/ /g, '-');
}

function getFileContent(filePath, id) {
  const fileUrl = path.resolve(__dirname, `../src/pages/docs/${filePath}/${id}.md`);
  const content = fs.readFileSync(fileUrl).toString()
    .replace(/([^`])(`)([^`])/gm, '$1$3')
    .replace(/```(|yaml|xml|php|json|javascript|sh)[^`]*```/gm, '');

  return markdown.toHTML(content);
}

function getHTML5Outline(fileContent) {
  return HTML5Outline(new JSDOM(fileContent).window.document.body);
}

function getTree(tree, node, id) {
  if (node.sections) {
    node.sections.map((section) => {
      if (!tree) {
        return;
      }
      let toPush = {
        id: 'H1' !== section.heading.tagName ? slug(section.heading.innerHTML) : id,
        title: section.heading.innerHTML,
      };
      toPush = 0 < getTree([], section).length ?
        { ...toPush, anchors: getTree([], section) } :
        toPush;
      tree.push(toPush);
    });
  }

  return tree;
}

module.exports.processFile = (filepath, id) => getTree([], getHTML5Outline(getFileContent(filepath, id)), id);
