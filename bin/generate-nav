#!/usr/bin/env node

const htmlFromMdFile = require('./htmlFromMdFile');
const { lstatSync, readdirSync, readFileSync, writeFile } = require('fs');
const { resolve } = require('path');
const jsYaml = require('js-yaml');
const loadedOutline = jsYaml.safeLoad(readFileSync(`${__dirname}/../config/outline.yaml`, 'utf8'));
const jsyaml = require('js-yaml');
const { DOMParser } = require('xmldom');
const lvl =  '  ';
const generatedTitle = '- title: ';
const generatedPath = `${lvl.repeat(1)}path: `;
const generatedItems = `${lvl.repeat(1)}items: `;
const generatedItemsId = `${lvl.repeat(2)}- id: `;
const generatedItemsTitle = `${lvl.repeat(3)}title: `;
const generatedItemsAnchors = `${lvl.repeat(3)}anchors: `;
const generatedAnchorId = `${lvl.repeat(4)}- id: `;
const generatedAnchorTitle = `${lvl.repeat(5)}title: `;

let yaml = '';
let h2s = [];

loadedOutline.map(el => {
  //dossier
  el.items.map(item => {
    //fichiers
    var elHtml = new DOMParser().parseFromString(`${htmlFromMdFile.generateHtmlFromMdFileNode(el.path, item.id, 'h1')}`, "text/html");
    Object.keys(elHtml).forEach(key => elHtml[key] === undefined ? delete elHtml[key] : '');
    item.yaml = jsyaml.safeLoad(jsyaml.safeDump(elHtml));
  });
});

function processDirectory(title, path) {
  yaml += `${generatedTitle}${title}\n${generatedPath}${path}\n`;
}

//Todo: remove switch by testing on h1
function processNode(node, data = null, isCurrentLvl = false) {
  switch (node) {
    case 'h1':
      yaml += !isCurrentLvl ? `${generatedItemsTitle}${data}\n` : `${generatedItemsTitle}${data}\n`;
      break;
    case 'h2':
      yaml += !isCurrentLvl ? `${generatedItemsAnchors}\n${generatedAnchorId}${(data.toLowerCase()).replace(/[^A-Za-z0-9\-\ \_]/g, '').replace(/ /g, '-')}\n${generatedAnchorTitle}${data}\n` : `${generatedAnchorId}${(data.toLowerCase()).replace(/[^A-Za-z0-9\-\ \_]/g, '').replace(/ /g, '-')}\n${generatedAnchorTitle}${data}\n`;
      break;
    case 'h3':
      yaml += !isCurrentLvl ? `${lvl.repeat(5)}anchors: \n${generatedAnchorId}${(data.toLowerCase()).replace(/[^A-Za-z0-9\-\ \_]/g, '').replace(/ /g, '-')}\n${generatedAnchorTitle}${data}\n` : `${generatedAnchorId}${(data.toLowerCase()).replace(/[^A-Za-z0-9\-\ \_]/g, '').replace(/ /g, '-')}\n${generatedAnchorTitle}${data}\n`;
      break;
    case 'h4':
      yaml += !isCurrentLvl ? `${lvl.repeat(7)}anchors: \n${generatedAnchorId}${(data.toLowerCase()).replace(/[^A-Za-z0-9\-\ \_]/g, '').replace(/ /g, '-')}\n${generatedAnchorTitle}${data}\n` : `${generatedAnchorId}${(data.toLowerCase()).replace(/[^A-Za-z0-9\-\ \_]/g, '').replace(/ /g, '-')}\n${generatedAnchorTitle}${data}\n`;
      break;
    case 'h5':
      yaml += !isCurrentLvl ? `${lvl.repeat(9)}anchors: \n${generatedAnchorId}${(data.toLowerCase()).replace(/[^A-Za-z0-9\-\ \_]/g, '').replace(/ /g, '-')}\n${generatedAnchorTitle}${data}\n` : `${generatedAnchorId}${(data.toLowerCase()).replace(/[^A-Za-z0-9\-\ \_]/g, '').replace(/ /g, '-')}\n${generatedAnchorTitle}${data}\n`;
      break;
    case 'h6':
      yaml += !isCurrentLvl ? `${lvl.repeat(11)}anchors: \n${generatedAnchorId}${(data.toLowerCase()).replace(/[^A-Za-z0-9\-\ \_]/g, '').replace(/ /g, '-')}\n${generatedAnchorTitle}${data}\n` : `${generatedAnchorId}${(data.toLowerCase()).replace(/[^A-Za-z0-9\-\ \_]/g, '').replace(/ /g, '-')}\n${generatedAnchorTitle}${data}\n`;
      break;
  }
}

loadedOutline.map( (section) => {
  processDirectory(section.title, section.path);
  var itemExist = false
  section.items.map( (item) => {
    yaml += itemExist ? `${generatedItemsId}${item.id}\n` : `${generatedItems}\n${generatedItemsId}${item.id}\n`;
    itemExist = true;
    var htmlLvl = 'h1';

    Object.keys(item.yaml.childNodes).map(function(objectKey, index) {
      if (Math.abs(index % 2) == 0) {
        let nodeName = item.yaml.childNodes[objectKey].nodeName;
        let data = item.yaml.childNodes[objectKey].childNodes[0].data;
        let isCurrentLvl = (htmlLvl == nodeName);
        htmlLvl = nodeName;
        //console.log(data)
        processNode(nodeName, data, isCurrentLvl);
      }
    });
  });
});

//console.log(yaml)
//console.log(loadedOutline[0].items[0].yaml)

writeFile(resolve(__dirname, '../src/pages/docs/nav.yml'), yaml, error => error && console.warn(error));
