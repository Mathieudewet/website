#!/usr/bin/env node

const htmlFromMdFile = require('./htmlFromMdFile');
const { readFileSync, writeFile } = require('fs');
const { resolve } = require('path');
const jsYaml = require('js-yaml');
const loadedOutline = jsYaml.safeLoad(readFileSync(`${__dirname}/../config/outline.yaml`, 'utf8'));
const jsyaml = require('js-yaml');
const { DOMParser } = require('xmldom');
const lvl =  '  ';
const generatedItemsId = `${lvl.repeat(2)}- id: `;
const generatedItemsTitle = `${lvl.repeat(3)}title: `;
const generatedAnchorId = `${lvl.repeat(4)}- id: `;
const generatedAnchorTitle = `${lvl.repeat(5)}title: `;

let yaml = '';

loadedOutline.map(el => {
  //dossier
  el.items.map(item => {
    //fichiers
    var elHtml = new DOMParser().parseFromString(`${htmlFromMdFile.generateHtmlFromMdFileNode(el.path, item.id, 'h1')}`, "text/html");
    Object.keys(elHtml).forEach(key => elHtml[key] === undefined ? delete elHtml[key] : '');
    item.yaml = jsyaml.safeLoad(jsyaml.safeDump(elHtml));
  });
});

function processDirectory(title, path) {
  yaml += `- title: "${title}"\n${lvl.repeat(1)}path: ${path}\n`;
}

function processNode(node, data = null, isCurrentLvl = false, isChild) {
  if (node === 'h1') {
    yaml += !isCurrentLvl ? `${generatedItemsTitle}"${data}"\n` : `${generatedItemsTitle}"${data}"\n`;
  } else {
    yaml += isChild ? `${lvl.repeat((parseInt(node.charAt(1)) * 2) - 1)}anchors: \n${lvl.repeat(((parseInt(node.charAt(1) - 2) * 2)))}${generatedAnchorId}${(data.toLowerCase()).replace(/[^A-Za-z0-9\-\ \_]/g, '').replace(/ /g, '-')}\n${lvl.repeat(((node.charAt(1) - 2) * 2))}${generatedAnchorTitle}${data}\n` : `${lvl.repeat(((node.charAt(1) - 2) * 2))}${generatedAnchorId}${(data.toLowerCase()).replace(/[^A-Za-z0-9\-\ \_]/g, '').replace(/ /g, '-')}\n${lvl.repeat(((node.charAt(1) - 2) * 2))}${generatedAnchorTitle}${data}\n`;
  }
}

loadedOutline.map((section) => {
  processDirectory(section.title, section.path);
  var itemExist = false;

  section.items.map( (item) => {
    yaml += itemExist ? `${generatedItemsId}${item.id}\n` : `${lvl.repeat(1)}items: \n${generatedItemsId}${item.id}\n`;
    itemExist = true;
    var htmlLvl = 'h1';

    Object.keys(item.yaml.childNodes).map(function(objectKey, index) {
      if (Math.abs(index % 2) == 0) {
        let nodeName = item.yaml.childNodes[objectKey].nodeName;
        let data = item.yaml.childNodes[objectKey].childNodes[0].data;
        let isCurrentLvl = (htmlLvl == nodeName);
        let isChild = parseInt(htmlLvl.charAt(1)) < parseInt(nodeName.charAt(1));
        htmlLvl = nodeName;
        processNode(nodeName, data, isCurrentLvl, isChild);
      }
    });
  });
});

writeFile(resolve(__dirname, '../src/pages/docs/nav.yml'), yaml, error => error && console.warn(error));
